package com.pcstore.repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * Repository interface for revenue-related database operations
 */
public interface iRevenueRepository {
    /**
     * Get revenue data for products within a date range
     * 
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return List of maps containing revenue data
     */
    List<Map<String, Object>> getRevenueData(LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get revenue for a specific product within a date range
     * 
     * @param productId Product ID
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return Total revenue for the product
     */
    BigDecimal getRevenueByProduct(String productId, LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get quantity sold for a specific product within a date range
     * 
     * @param productId Product ID
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return Total quantity sold for the product
     */
    int getQuantitySoldByProduct(String productId, LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get top selling products within a date range
     * 
     * @param limit Number of top products to retrieve
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return List of maps containing top selling products data
     */
    List<Map<String, Object>> getTopSellingProducts(int limit, LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get employee revenue data within a date range
     * 
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return List of maps containing employee revenue data
     */
    List<Map<String, Object>> getEmployeeRevenueData(LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get revenue for a specific employee within a date range
     * 
     * @param employeeId Employee ID
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return Total revenue generated by the employee
     */
    BigDecimal getRevenueByEmployee(String employeeId, LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get number of sales for a specific employee within a date range
     * 
     * @param employeeId Employee ID
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return Total number of sales made by the employee
     */
    int getNumberOfSalesByEmployee(String employeeId, LocalDateTime fromDateTime, LocalDateTime toDateTime);
    
    /**
     * Get top performing employees within a date range
     * 
     * @param limit Number of top employees to retrieve
     * @param fromDateTime Start date and time
     * @param toDateTime End date and time
     * @return List of maps containing top performing employees data
     */
    List<Map<String, Object>> getTopPerformingEmployees(int limit, LocalDateTime fromDateTime, LocalDateTime toDateTime);
}