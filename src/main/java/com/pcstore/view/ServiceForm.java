/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.pcstore.view;

import com.pcstore.utils.LocaleManager;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.GroupLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import com.k33ptoo.components.KGradientPanel;

/**
 *
 * @author DUC ANH
 */
public class ServiceForm extends JPanel {


    private KGradientPanel activePanel = null;
    private JLabel activeLabel = null;

    private WarrantyServiceForm warrantyServiceForm;
    private ReturnServiceForm returnServiceForm;;
    private RepairServiceForm repairServiceForm;

    /**
     * Creates new form Service
     */
    public ServiceForm() {
    
        warrantyServiceForm = new WarrantyServiceForm();
        returnServiceForm = new ReturnServiceForm();   
        repairServiceForm = new RepairServiceForm();

        initComponents();
        initializeHoverEffects();

        selectMenu(panelWarranty, lbWarranty, warrantyServiceForm);
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNav = new javax.swing.JPanel();
        panelWarranty = new com.k33ptoo.components.KGradientPanel();
        lbWarranty = new javax.swing.JLabel();
        panelReturn = new com.k33ptoo.components.KGradientPanel();
        lbReturn = new javax.swing.JLabel();
        panelRepair = new com.k33ptoo.components.KGradientPanel();
        lbRepair = new javax.swing.JLabel();
        panelContent = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1153, 713));
        setPreferredSize(new java.awt.Dimension(1153, 713));
        setLayout(new java.awt.BorderLayout());

        panelNav.setBackground(new java.awt.Color(102, 153, 255));
        panelNav.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        panelNav.setOpaque(false);
        panelNav.setPreferredSize(new java.awt.Dimension(530, 40));
        panelNav.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        panelWarranty.setBackground(new java.awt.Color(255, 255, 255));
        panelWarranty.setkBorderRadius(20);
        panelWarranty.setkFillBackground(false);
        panelWarranty.setOpaque(false);
        panelWarranty.setPreferredSize(new java.awt.Dimension(150, 35));
        panelWarranty.setLayout(new java.awt.BorderLayout());

        lbWarranty.setBackground(new java.awt.Color(255, 255, 255));
        lbWarranty.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbWarranty.setForeground(new java.awt.Color(30, 113, 195));
        lbWarranty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = LocaleManager.getInstance().getResourceBundle(); // NOI18N
        lbWarranty.setText(bundle.getString("WarrantyServiceW")); // NOI18N
        lbWarranty.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelWarranty.add(lbWarranty, java.awt.BorderLayout.CENTER);

        panelNav.add(panelWarranty);

        panelReturn.setBackground(new java.awt.Color(255, 255, 255));
        panelReturn.setkBorderRadius(20);
        panelReturn.setkFillBackground(false);
        panelReturn.setOpaque(false);
        panelReturn.setPreferredSize(new java.awt.Dimension(185, 35));
        panelReturn.setLayout(new java.awt.BorderLayout());

        lbReturn.setBackground(new java.awt.Color(255, 255, 255));
        lbReturn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbReturn.setForeground(new java.awt.Color(30, 113, 195));
        lbReturn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbReturn.setText(bundle.getString("ReTurnService")); // NOI18N
        lbReturn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelReturn.add(lbReturn, java.awt.BorderLayout.CENTER);

        panelNav.add(panelReturn);

        panelRepair.setBackground(new java.awt.Color(255, 255, 255));
        panelRepair.setkBorderRadius(20);
        panelRepair.setkFillBackground(false);
        panelRepair.setOpaque(false);
        panelRepair.setPreferredSize(new java.awt.Dimension(150, 35));
        panelRepair.setLayout(new java.awt.BorderLayout());

        lbRepair.setBackground(new java.awt.Color(255, 255, 255));
        lbRepair.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbRepair.setForeground(new java.awt.Color(30, 113, 195));
        lbRepair.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbRepair.setText(bundle.getString("RepairService")); // NOI18N
        lbRepair.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelRepair.add(lbRepair, java.awt.BorderLayout.CENTER);

        panelNav.add(panelRepair);

        add(panelNav, java.awt.BorderLayout.NORTH);

        panelContent.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout panelContentLayout = new javax.swing.GroupLayout(panelContent);
        panelContent.setLayout(panelContentLayout);
        panelContentLayout.setHorizontalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1153, Short.MAX_VALUE)
        );
        panelContentLayout.setVerticalGroup(
            panelContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(panelContent, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents



    // Start Hover========================================================
    private void initializeHoverEffects() {
        // Tạo mảng các cặp panel-label để xử lý một lần
        KGradientPanel[] panels = {panelWarranty, panelReturn, panelRepair};
        JLabel[] labels = {lbWarranty, lbReturn, lbRepair};
        
        // Áp dụng MouseListener cho cả panel và label
        for (int i = 0; i < panels.length; i++) {
            final KGradientPanel panel = panels[i];
            final JLabel label = labels[i];
            
            // Listener cho panel
            panel.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent evt) {
                    hoverPanel(panel, label);
                }
                
                @Override
                public void mouseExited(MouseEvent evt) {
                    if (activePanel != panel) {
                        exitHoverPanel(panel, label);
                    }
                }
                
                @Override
                public void mouseClicked(MouseEvent evt) {
                    handleMenuClick(panel, label);
                }
            });
            
        }
    }

    private void hoverPanel(KGradientPanel panel, JLabel label) {
        panel.kFillBackground = true;
        label.setForeground(new Color(255,255,255));
        panel.repaint();
    }

    private void exitHoverPanel(KGradientPanel panel, JLabel label) {
        panel.kFillBackground = false;
        label.setForeground(new Color(0,0,0));
        panel.repaint();
    }
       /**
     * Xử lý khi click vào menu
     */
    private void handleMenuClick(KGradientPanel panel, JLabel label) {
        if (panel == panelWarranty) {
            selectMenu(panel, label, warrantyServiceForm);
        } else if (panel == panelReturn) {
            selectMenu(panel, label, returnServiceForm);
        } else if (panel == panelRepair) {
            selectMenu(panel, label, repairServiceForm);
        }
    }

    /**
     * Chọn menu và hiển thị component tương ứng
     */
    private void selectMenu(KGradientPanel panel, JLabel label, JPanel component) {
        // Bỏ chọn menu hiện tại (nếu có)
        if (activePanel != null && activeLabel != null) {
            exitHoverPanel(activePanel, activeLabel);
        }
        
        // Đánh dấu menu mới
        activePanel = panel;
        activeLabel = label;
        
        // Cập nhật giao diện của menu được chọn
        panel.setkFillBackground(true);
        panel.setkStartColor(new Color(102, 204, 255)); // Xanh dương nhạt
        panel.setkEndColor(new Color(0, 153, 255));     // Xanh dương đậm
        label.setForeground(new Color(255, 255, 255));  // Trắng
        panel.repaint();
        
        // Hiển thị component
        showComponent(component);
    }

    /**
     * Hiển thị component trong jPanel2
     */
    private void showComponent(JPanel component) {
        // Xóa tất cả các component hiện tại
        panelContent.removeAll();
        
        // Thiết lập layout
        panelContent.setLayout(new BorderLayout());
        
        // Thêm component mới
        panelContent.add(component, BorderLayout.CENTER);
        
        // Cập nhật hiển thị
        panelContent.repaint();
        panelContent.revalidate();
    }

    /**
     * Các phương thức hiển thị service cụ thể - giữ lại để tương thích ngược
     */
    private void showWarrantyService() {
        selectMenu(panelWarranty, lbWarranty, warrantyServiceForm);
    }
    
    private void showReturnService() {
        selectMenu(panelReturn, lbReturn, returnServiceForm);
    }
    
    private void showRepairService() {
        selectMenu(panelRepair, lbRepair, repairServiceForm);
    }

    /**
     * Thiết lập controller cho RepairServiceForm
     */
    public void setRepairController(com.pcstore.controller.RepairController controller) {
        if (repairServiceForm != null) {
            repairServiceForm.setRepairController(controller);
            // Đảm bảo form sửa chữa được hiển thị sau khi thiết lập controller
            if (activePanel == panelRepair) {
                loadRepairServiceForm();
            }
        }
    }

    /**
     * Tải lại form dịch vụ sửa chữa
     */
    private void loadRepairServiceForm() {
        if (repairServiceForm != null) {
            repairServiceForm.loadRepairServices();
        }
    }

    // End Hover=====================================================


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbRepair;
    private javax.swing.JLabel lbReturn;
    private javax.swing.JLabel lbWarranty;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelNav;
    private com.k33ptoo.components.KGradientPanel panelRepair;
    private com.k33ptoo.components.KGradientPanel panelReturn;
    private com.k33ptoo.components.KGradientPanel panelWarranty;
    // End of variables declaration//GEN-END:variables
}
